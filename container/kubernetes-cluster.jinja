resources:

- name: {{ properties.name }}-gke-nodes-sa
  type: iam.v1.serviceAccount
  properties:
    accountId: {{ properties.name }}-gke-nodes
    displayName: VM Service Account for {{ properties.name }}-gke-nodes-sa GKE Cluster VMs

- name: {{ properties.name }}-nodes-custom-role
  type: gcp-types/iam-v1:projects.roles
  properties:
    parent: "projects/{{ env.project }}"
    roleId: "custom.{{ properties.name }}Nodes"
    role:
        title: Custom Role for GKE cluster nodes
        description: This role allows a GKE cluster nodes work with GCP APIs
        stage: GA
        includedPermissions:
        - logging.logEntries.create
        - monitoring.groups.get
        - monitoring.groups.list
        - monitoring.metricDescriptors.create
        - monitoring.metricDescriptors.get
        - monitoring.metricDescriptors.list
        - monitoring.monitoredResourceDescriptors.get
        - monitoring.monitoredResourceDescriptors.list
        - monitoring.timeSeries.create
        - monitoring.timeSeries.list

- name: {{ env["project"] }}-{{ properties.name }}-nodes-sa-binding
  type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
  properties:
    resource: {{ env["project"] }}
    member: serviceAccount:$(ref.{{ properties.name }}-gke-nodes-sa.email)
    role: $(ref.{{ properties.name }}-nodes-custom-role.name)

- name: {{ properties.name }}
{% if properties.type == 'REGIONAL' %}
  type: gcp-types/container-v1:projects.locations.clusters
  properties:
    parent: {{ "projects/{}/locations/{}".format(
      properties.network.project or env.project, properties.network.location)
    }}
{% elif properties.type == 'LOCAL' %}
  type: gcp-types/container-v1:projects.zones.clusters
  properties:
    parent: {{ "projects/{}/zones/{}".format(
      properties.network.project or env.project, properties.network.location)
    }}
    zone: {{ properties.network.location }}
{% endif %}
    cluster:
      name: {{ properties.name }}
      network: {{ properties.network.name }}
      subnetwork: {{ properties.network.subnet }}
{% if properties.type == 'REGIONAL' %}
      {% if properties.locations %}
      locations: {{ properties.locations }}
      {% else %}
      locations:
        - "{{ properties.network.location }}-b"
        - "{{ properties.network.location }}-c"
        - "{{ properties.network.location }}-d"
      {% endif %}
{% elif properties.type == 'LOCAL' %}
      locations:
        - {{ properties.network.location }}
{% endif %}
{% if properties.initialVersion %}
      initialClusterVersion: {{ properties.initialVersion }}
{% endif %}
      loggingService: {{ properties.loggingService }}
      monitoringService: {{ properties.monitoringService }}
      ipAllocationPolicy:
        useIpAliases: true
        clusterSecondaryRangeName: "pods"
        servicesSecondaryRangeName: "services"
      masterAuth:
        clientCertificateConfig:
          issueClientCertificate: false
      masterAuthorizedNetworksConfig:
        enabled: {{ properties.masterAuthorizedNetworks | length > 0 }}
        {% if properties.masterAuthorizedNetworks %}
        cidrBlocks:
          {% for authorizedNetwork in properties.masterAuthorizedNetworks %}
          - name: {{ authorizedNetwork.name }}
            cidrBlock: {{ authorizedNetwork.cidrBlock }}
          {% endfor %}
        {% endif %}
      addonsConfig:
        httpLoadBalancing:
          disabled: true
        horizontalPodAutoscaling:
          disabled: false
        kubernetesDashboard:
          disabled: true
        networkPolicyConfig:
          disabled: true
      {% if properties.mode == 'CREATE' %}
      nodePools:
        - name: initial-gke-node-pool
          initialNodeCount: 0
      {% endif %}
  metadata:
    dependsOn:
      - {{ env["project"] }}-{{ properties.name }}-nodes-sa-binding

{% if properties.mode == 'UPDATE' %}

{% for nodePool in properties.nodePools %}
- name: {{ properties.name }}-{{ nodePool.name }}-gke-node-pool
{% if properties.type == 'REGIONAL' %}
  type: gcp-types/container-v1:projects.locations.clusters.nodePools
  properties:
    parent: {{ "projects/{}/locations/{}/clusters/{}".format(
      properties.network.project or env.project, properties.network.location, properties.name
    )}}
{% elif properties.type == 'LOCAL' %}
  type: gcp-types/container-v1:projects.zones.clusters.nodePools
  properties:
    parent: {{ "projects/{}/zones/{}/clusters/{}".format(
      properties.network.project or env.project, properties.network.location, properties.name
    )}}
    zone: {{ properties.network.location }}
{% endif %}
    clusterId: {{ properties.name }}
    nodePool:
      name: {{ nodePool.name }}-pool
    {% if nodePool.version or properties.initialVersion %}
      version: {{ nodePool.version or properties.initialVersion }}
    {% endif %}
      initialNodeCount: {{ nodePool.initialNodeCount }}
    {% if nodePool.autoscaling %}
      autoscaling:
        enabled: true
        minNodeCount: {{ nodePool.minNodeCount }}
        maxNodeCount: {{ nodePool.maxNodeCount }}
    {% endif %}
      config:
        machineType: {{ nodePool.machineType }}
        imageType: {{ nodePool.imageType }}
        diskType: {{ nodePool.diskType }}
        diskSizeGb: {{ nodePool.diskSizeGb }}
        preemptible: {{ nodePool.preemptible }}
        serviceAccount: $(ref.{{ properties.name }}-gke-nodes-sa.email)
        oauthScopes:
          - https://www.googleapis.com/auth/compute
          - https://www.googleapis.com/auth/devstorage.read_only
          - https://www.googleapis.com/auth/logging.write
          - https://www.googleapis.com/auth/monitoring
          - https://www.googleapis.com/auth/servicecontrol
          - https://www.googleapis.com/auth/service.management.readonly
        tags: {{ nodePool.tags }}
        {% if nodePool.taints %}
        taints:
          {% for taint in nodePool.taints %}
          - key: {{ taint.key }}
            value: "{{ taint.value }}"
            effect: {{ taint.effect }}
          {% endfor %}
        {% endif %}
  metadata:
    dependsOn:
      - {{ properties.name }}
      - {{ properties.name }}-gke-nodes-sa
  {% if loop.index != loop.length %}
      - {{ properties.name }}-{{ properties['nodePools'][loop.index]['name'] }}-gke-node-pool
  {% endif %}
{% endfor %}

{% endif %}

{% set K8S_ENDPOINTS = {
    'v1': 'api/v1',
    'apps-v1beta1': 'apis/apps/v1beta1',
    'extensions-v1beta1': 'apis/extensions/v1beta1',
    'rbac-v1': 'apis/rbac.authorization.k8s.io/v1',
  }
%}

{% for typeSuffix, endpoint in K8S_ENDPOINTS.iteritems() %}
- name: k8s-{{ typeSuffix }}-type
  type: deploymentmanager.v2beta.typeProvider
  properties:
    options:
      validationOptions:
        schemaValidation: IGNORE_WITH_WARNINGS
      inputMappings:
      - fieldName: name
        location: PATH
        methodMatch: ^(GET|DELETE|PUT)$
        value: $.ifNull($.resource.properties.metadata.name, $.resource.name)
      - fieldName: metadata.name
        location: BODY
        methodMatch: ^(PUT|POST)$
        value: $.ifNull($.resource.properties.metadata.name, $.resource.name)
      - fieldName: Authorization
        location: HEADER
        value: >
          $.concat("Bearer ", $.googleOauth2AccessToken())
    descriptorUrl: https://$(ref.{{ properties.name }}.endpoint)/swaggerapi/{{ endpoint }}
  metadata:
    dependsOn:
      - {{ properties.name }}
{% endfor %}

{% set K8S_NS_COLLECTION = '/api/v1/namespaces' %}
{% set K8S_CM_COLLECTION = '/api/v1/namespaces/{namespace}/configmaps' %}
{% set K8S_DEPLOYMENTS_COLLECTION = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments' %}
{% set K8S_DS_COLLECTION = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets' %}
{% set K8S_SVC_COLLECTION = '/api/v1/namespaces/{namespace}/services' %}
{% set K8S_SA_COLLECTION = '/api/v1/namespaces/{namespace}/serviceaccounts' %}
{% set K8S_CR_COLLECTION = '/apis/rbac.authorization.k8s.io/v1/clusterroles' %}
{% set K8S_CRB_COLLECTION = '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings' %}


{% if properties.network.nonMasqueradeCIDRs %}
- name: k8s-ip-masq-agent-configmap
  type: {{ env.project }}/k8s-v1-type:{{ K8S_CM_COLLECTION }}
  properties:
    apiVersion: v1
    kind: ConfigMap
    namespace: kube-system
    metadata:
      name: ip-masq-agent
      namespace: kube-system
    data:
      config: |
        nonMasqueradeCIDRs:
          - {{ properties.network.nonMasqueradeCIDRs }}
        resyncInterval: 60s
  metadata:
    dependsOn:
      - k8s-v1-type
{% endif %}

{% if properties.network.dns == 'coreDNS' %}

- name: k8s-coredns-sa
  type: {{ env.project }}/k8s-v1-type:{{ K8S_SA_COLLECTION }}
  properties:
    apiVersion: v1
    kind: ServiceAccount
    namespace: kube-system
    metadata:
      name: coredns
      namespace: kube-system
  metadata:
    dependsOn:
      - k8s-v1-type

- name: k8s-coredns-cr
  type: {{ env.project }}/k8s-rbac-v1-type:{{ K8S_CR_COLLECTION }}
  properties:
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    namespace: kube-system
    metadata:
      labels:
        kubernetes.io/bootstrapping: rbac-defaults
      name: system:coredns
    rules:
    - apiGroups:
      - ""
      resources:
      - endpoints
      - services
      - pods
      - namespaces
      verbs:
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - nodes
      verbs:
      - get
  metadata:
    dependsOn:
      - k8s-rbac-v1-type

- name: k8s-coredns-crb
  type: {{ env.project }}/k8s-rbac-v1-type:{{ K8S_CRB_COLLECTION }}
  properties:
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    namespace: kube-system
    metadata:
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
      labels:
        kubernetes.io/bootstrapping: rbac-defaults
      name: system:coredns
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:coredns
    subjects:
    - kind: ServiceAccount
      name: coredns
      namespace: kube-system
  metadata:
    dependsOn:
      - k8s-rbac-v1-type

- name: k8s-coredns-configmap
  type: {{ env.project }}/k8s-v1-type:{{ K8S_CM_COLLECTION }}
  properties:
    apiVersion: v1
    kind: ConfigMap
    namespace: kube-system
    metadata:
      name: coredns
      namespace: kube-system
    data:
      Corefile: |
        .:53 {
            errors
            health
            kubernetes cluster.local in-addr.arpa ip6.arpa {
              pods insecure
              upstream
              fallthrough in-addr.arpa ip6.arpa
            }
            prometheus :9153
            proxy . /etc/resolv.conf
            cache 30
            loop
            reload
            loadbalance
        }
  metadata:
    dependsOn:
      - k8s-v1-type

- name: k8s-coredns-deployment
  type: {{ env.project }}/k8s-extensions-v1beta1-type:{{ K8S_DEPLOYMENTS_COLLECTION }}
  properties:
    apiVersion: extensions/v1beta1
    kind: Deployment
    namespace: kube-system
    metadata:
      name: coredns
      namespace: kube-system
      labels:
        k8s-app: kube-dns
        kubernetes.io/name: 'CoreDNS'
    spec:
      replicas: 2
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 1
      selector:
        matchLabels:
          k8s-app: kube-dns
      template:
        metadata:
          labels:
            k8s-app: kube-dns
        spec:
          serviceAccountName: coredns
          tolerations:
            - key: CriticalAddonsOnly
              operator: 'Exists'
            - key: EdgeOnly
              operator: 'Exists'
          nodeSelector:
            beta.kubernetes.io/os: linux
          containers:
            - name: coredns
              image: coredns/coredns:1.2.6
              imagePullPolicy: IfNotPresent
              resources:
                limits:
                  cpu: 100m
                  memory: 170Mi
                requests:
                  cpu: 50m
                  memory: 30Mi
              args: ['-conf', '/etc/coredns/Corefile']
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/coredns
                  readOnly: true
              ports:
                - containerPort: 53
                  name: dns
                  protocol: UDP
                - containerPort: 53
                  name: dns-tcp
                  protocol: TCP
                - containerPort: 9153
                  name: metrics
                  protocol: TCP
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  add:
                    - NET_BIND_SERVICE
                  drop:
                    - all
                readOnlyRootFilesystem: true
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 5
          dnsPolicy: Default
          volumes:
            - name: config-volume
              configMap:
                name: coredns
                items:
                  - key: Corefile
                    path: Corefile
  metadata:
    dependsOn:
      - k8s-v1-type

{% endif %}

{% if properties.network.traefik %}

- name: {{ CLUSTER_NAME }}-k8s-traefik-namespace
  type: {{ env.project }}/{{ CLUSTER_NAME }}-k8s-type-v1:{{ K8S_NS_COLLECTION }}
  properties:
    kind: Namespace
    metadata:
      name: traefik
  metadata:
    dependsOn:
      - {{ CLUSTER_NAME }}-k8s-type-v1

- name: {{ CLUSTER_NAME }}-k8s-traefik-sa
  type: {{ env.project }}/{{ CLUSTER_NAME }}-k8s-type-v1:{{ K8S_SA_COLLECTION }}
  properties:
    apiVersion: v1
    kind: ServiceAccount
    namespace: traefik
    metadata:
      name: traefik
  metadata:
    dependsOn:
      - {{ CLUSTER_NAME }}-k8s-type-v1
      - {{ CLUSTER_NAME }}-k8s-traefik-namespace

- name: {{ CLUSTER_NAME }}-k8s-traefik-cr
  type: {{ env.project }}/{{ CLUSTER_NAME }}-k8s-type-rbac-v1:{{ K8S_CR_COLLECTION }}
  properties:
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    namespace: kube-system
    metadata:
      name: traefik
    rules:
      - apiGroups:
          - ""
        resources:
          - services
          - endpoints
          - secrets
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - extensions
        resources:
          - ingresses
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - extensions
        resources:
          - ingresses/status
        verbs:
          - update
  metadata:
    dependsOn:
      - {{ CLUSTER_NAME }}-k8s-type-rbac-v1

- name: {{ CLUSTER_NAME }}-k8s-traefik-crb
  type: {{ env.project }}/{{ CLUSTER_NAME }}-k8s-type-rbac-v1:{{ K8S_CRB_COLLECTION }}
  properties:
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    namespace: kube-system
    metadata:
      name: traefik
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: traefik
    subjects:
    - kind: ServiceAccount
      name: traefik
      namespace: traefik
  metadata:
    dependsOn:
      - {{ CLUSTER_NAME }}-k8s-type-rbac-v1
      - {{ CLUSTER_NAME }}-k8s-traefik-sa
      - {{ CLUSTER_NAME }}-k8s-traefik-cr

- name: {{ CLUSTER_NAME }}-k8s-traefik-ds
  type: {{ env.project }}/{{ CLUSTER_NAME }}-k8s-type-extensions-v1beta1:{{ K8S_DS_COLLECTION }}
  properties:
    kind: DaemonSet
    apiVersion: extensions/v1beta1
    namespace: traefik
    metadata:
      name: traefik
      labels:
        k8s-app: traefik
    spec:
      updateStrategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 50%
      template:
        metadata:
          labels:
            k8s-app: traefik
            name: traefik
        spec:
          serviceAccountName: traefik
          terminationGracePeriodSeconds: 60
          containers:
          - image: traefik
            name: traefik
            ports:
            - name: http
              containerPort: 80
              hostPort: 80
            - name: https
              containerPort: 443
              hostPort: 443
            - name: admin
              containerPort: 8080
              hostPort: 8080
            securityContext:
              capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            args:
            - --api
            - --kubernetes
            - --logLevel=INFO
            - --accesslog
            {# - "--entrypoints=Name:web Address::80"
            - "--entrypoints=Name:websecure Address::443 TLS"
            - --acme
            - --acme.acmelogging
            - --acme.tlschallenge
            - --acme.onhostrule
            - --acme.email=domains@rael.io
            - --acme.entrypoint=websecure
            - --acme.storage=acme.json
            # Please note that this is the staging Let's Encrypt server. Once you get things
            # working, you should remove that whole line altogether.
            - --acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory #}
  metadata:
    dependsOn:
      - {{ CLUSTER_NAME }}-k8s-type-extensions-v1beta1
      - {{ CLUSTER_NAME }}-k8s-traefik-namespace
      - {{ CLUSTER_NAME }}-k8s-traefik-sa

{% if properties.network.traefikServiceType == 'LoadBalancer' %}

- name: {{ CLUSTER_NAME }}-traefik-external-address
  type: compute.v1.address
  properties:
    addressType: EXTERNAL
    region: {{ properties.network.region }}

- name: {{ CLUSTER_NAME }}-k8s-traefik-srv
  type: {{ env.project }}/{{ CLUSTER_NAME }}-k8s-type-v1:{{ K8S_SVC_COLLECTION }}
  properties:
    kind: Service
    apiVersion: v1
    namespace: traefik
    metadata:
      name: traefik
    spec:
      type: LoadBalancer
      loadBalancerIP: $(ref.{{ CLUSTER_NAME }}-traefik-external-address.address)
      selector:
        k8s-app: traefik
      ports:
        - name: web
          protocol: TCP
          port: 80
          targetPort: 80
        - name: websecure
          protocol: TCP
          port: 443
          targetPort: 443
        - name: admin
          protocol: TCP
          port: 8080
          targetPort: 8080
  metadata:
    dependsOn:
      - {{ CLUSTER_NAME }}-k8s-type-v1
      - {{ CLUSTER_NAME }}-traefik-external-address
      - {{ CLUSTER_NAME }}-k8s-traefik-namespace

- name: {{ CLUSTER_NAME }}-k8s-traefik-srv-root-dns-rs
  type: gcp-types/dns-v1:resourceRecordSets
  properties:
    name: "{{ CLUSTER_NAME }}.{{ properties.network.dnsZone.fqdn }}."
    managedZone: {{ properties.network.dnsZone.name }}
    records:
    - type: A
      ttl: 60
      rrdatas:
      - $(ref.{{ CLUSTER_NAME }}-traefik-external-address.address)

- name: {{ CLUSTER_NAME }}-k8s-traefik-srv-wildcard-dns-rs
  type: gcp-types/dns-v1:resourceRecordSets
  properties:
    name: "*.{{ CLUSTER_NAME }}.{{ properties.network.dnsZone.fqdn }}."
    managedZone: {{ properties.network.dnsZone.name }}
    records:
    - type: A
      ttl: 60
      rrdatas:
      - $(ref.{{ CLUSTER_NAME }}-traefik-external-address.address)

{% endif %}
{% endif %}

outputs:
  - name: project
    value: {{ env.project }}
  - name: name
    value: $(ref.{{ properties.name }}.name)
  - name: nodes-sa
    value: $(ref.{{ properties.name }}-gke-nodes-sa.email)
  - name: endpoint
    value: $(ref.{{ properties.name }}.endpoint)