
resources:

- name: {{ name }}
  type: sqladmin.v1beta4.instance
  properties:
    backendType: {{ properties['backendType'] }}
    instanceType: {{ properties['instanceType'] }}
    databaseVersion: {{ properties['databaseVersion'] }}
    region: {{ properties['region'] }}
    settings:
      {# General #}
      tier: {{ properties['tier'] }}
      activationPolicy: {{ properties['activationPolicy'] }}
      pricingPlan: {{ properties['pricingPlan'] }}
      {# Location #}
      locationPreference:
        zone: {{ properties['zone'] }}
      {# Connectivity #}
      ipConfiguration:
        ipv4Enabled: {{ properties['publicIp'] }}
        {% if properties['authorizedNetworks'] %}
        authorizedNetworks:
          {% for authorizedNetwork in properties['authorizedNetworks'] %}
          - name: {{ authorizedNetwork.name }}
            cidrBlock: {{ authorizedNetwork.cidrBlock }}
          {% endfor %}
        {% endif %}
        {% if properties['privateIp'] %}
        privateNetwork: {{ "projects/{}/global/networks/{}".format(
          env['project'], properties['privateNetwork']
        ) }}
        {% endif %}
      {# Storage #}
      dataDiskSizeGb: {{ properties['dataDiskSizeGb'] }}
      dataDiskType: {{ properties['dataDiskType'] }}
      storageAutoResize: {{ properties['storageAutoResize'] }}
      storageAutoResizeLimit: {{ properties['storageAutoResizeLimit'] }}
      {# Database Flags #}
      {% if properties['databaseFlags'] %}
      databaseFlags: {{ properties['databaseFlags'] }}
      {% endif %}
      {# Maintenance #}
      maintenanceWindow:
        day: {{ properties['maintenanceWindowDay'] }}
        hour: {{ properties['maintenanceWindowTime'] }}
        updateTrack: {{ properties['maintenanceWindowUpdateTrack'] }}
      {# Backup #}
      {% if properties['backupEnabled'] %}
      backupConfiguration:
        enabled: {{ properties['backupEnabled'] }}
        binaryLogEnabled: true
        startTime: {{ properties['backupStartTime'] }}
      {% endif %}

{% if properties['deleteDefaultRootUser'] %}
- name: delete-{{ name }}-root-default-db-user
  action: gcp-types/sqladmin-v1beta4:sql.users.delete
  properties:
    name: root
    host: '%'
    instance: $(ref.{{ name }}.name)
  metadata:
    runtimePolicy:
      - CREATE
    dependsOn:
      - {{ name }}
{% endif %}

{% for database in properties['databases'] %}
- name: {{ name }}-{{ database['name'] }}-db
  type: sqladmin.v1beta4.database
  properties:
    instance: $(ref.{{ name }}.name)
    name: {{ database['name'] }}
    charset: {{ database['charset'] }}
  {% if loop.index != loop.length %}
  metadata:
    dependsOn:
      - {{ name }}-{{ properties['databases'][loop.index]['name'] }}-db
  {% endif %}
{% endfor %}

- name: {{ name }}-kms-kr
  type: gcp-types/cloudkms-v1:projects.locations.keyRings
  properties:
    parent: projects/{{ env["project"] }}/locations/{{ properties["region"] }}
    keyRingId: {{ name }}-kms-kr

- name: {{ name }}-users-kms-ck
  type: gcp-types/cloudkms-v1:projects.locations.keyRings.cryptoKeys
  properties:
    parent: $(ref.{{ name }}-kms-kr.name)
    cryptoKeyId: {{ name }}-users-kms-ck
    purpose: ENCRYPT_DECRYPT

- name: {{ name }}-root-pass
  action: gcp-types/cloudkms-v1:cloudkms.projects.locations.keyRings.cryptoKeys.decrypt
  properties:
    name: $(ref.{{ name }}-users-kms-ck.name)
    ciphertext: {{ properties.root.pass }}

{% if properties['root'] %}
- name: {{ name }}-root-db-user
  type: sqladmin.v1beta4.user
  properties:
    name: root
    host: "{{ properties['root']['host'] }}"
    instance: $(ref.{{ name }}.name)
    password: $(ref.{{ name }}-root-pass.plaintext)
  metadata:
    dependsOn:
      - {{ name }}-root-pass
      - {{ name }}
{% endif %}